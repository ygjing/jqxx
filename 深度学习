import pandas as pd
from sklearn.model_selection import train_test_split
import cv2
from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras.layers import Dense, Dropout, Flatten
import keras
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.applications.resnet_v2 import ResNet50V2

# 读取训练数据
train = pd.read_csv('/kaggle/input/facial-keypoints-detection/training.zip', compression='zip')
train = pd.read_csv('/kaggle/input/facial-keypoints-detection/training.zip', compression='zip')
# 定义配置
class Config:
    size = 96
    img_size = (size, size, 3)
    test_size = .15
    random_state = 42
    batch_size=32
config = Config()
# 处理训练数据
img = []
n = len(train)
for i in range(n):
    face_pixel = np.array(train['Image'][i].split(' '), dtype='float')
    face_pixel = np.reshape(face_pixel, (config.size,config.size))
    face_pixel = np.float32(face_pixel)
    face_pixel = cv2.cvtColor(face_pixel, cv2.COLOR_GRAY2RGB) /255
img.append(face_pixel)
# 划分训练集和验证集
X_train = np.array(img)
y_train = train.drop('Image',axis=1).values
y_train.shape
def image_with_keypoints(X, y, index):
    image = plt.imshow(X[index],cmap='gray')
    l = []
    for i in range(1,31,2):
        l.append(plt.plot( y[index][i-1], y_train[index][i], 'r*'))
        
    return image, l

fig = plt.figure(figsize=(3, 3))

image_with_keypoints(X_train, y_train, 0)

plt.show()
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = config.test_size, random_state = config.random_state)
X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = config.test_size, random_state = config.random_state)

X_train.shape, X_val.shape, X_test.shape
# 训练模型

def train_model(model_api, config, classes, folder_name):
  model_base = model_api(include_top = False, input_shape = config.img_size, weights = 'imagenet')

  model_base.trainable = False

  model = Sequential()
  model.add(model_base)
  model.add(Flatten())
#   model.add(Dense(256, activation='relu'))
  model.add(Dense(128, activation='relu'))
  model.add(Dense(64, activation='relu'))
  model.add(Dense(classes))
    
    
  model.compile(optimizer=keras.optimizers.Adam(5e-5), loss='mse', metrics=['accuracy'])

#   early = EarlyStopping(monitor="val_accuracy", mode="max", patience=2, verbose = 1)
#   checkpoint = ModelCheckpoint(f'./{folder_name}.ckpt', monitor='val_accuracy', save_best_only=True, mode='max')

  model.fit(
      X_train, 
      y_train, 
      batch_size=config.batch_size,
      epochs = 10, 
      validation_data=(X_val, y_val),
      verbose=1)#,
#       callbacks=[checkpoint, early])
  

  return model
# 尝试其他模型

resnet_model = train_model(ResNet50V2, config, y_train.shape[1], 'ResNet50V2')
test_loss, test_accuracy = resnet_model.evaluate(X_test, y_test)
print("Test results \n Loss:",test_loss,'\n Accuracy',test_accuracy)
test_acc = np.expand_dims(X_train[0], axis=0)
%timeit resnet_model.predict(test_acc, verbose = 0)
from keras.applications import MobileNet, MobileNetV2, DenseNet121
mobile_model = train_model(MobileNet, config, y_train.shape[1], 'MobileNet')
test_loss, test_accuracy = mobile_model.evaluate(X_test, y_test)
print("Test results \n Loss:",test_loss,'\n Accuracy',test_accuracy)
test_acc = np.expand_dims(X_train[0], axis=0)
%timeit mobile_model.predict(test_acc, verbose = 0)
mobilev2_model = train_model(MobileNetV2, config, y_train.shape[1], 'MobileNetV2')
test_loss, test_accuracy = mobilev2_model.evaluate(X_test, y_test)
print("Test results \n Loss:",test_loss,'\n Accuracy',test_accuracy)
test_acc = np.expand_dims(X_train[0], axis=0)
%timeit mobilev2_model.predict(test_acc, verbose = 0)
from keras.applications import EfficientNetV2B0
eff_model = train_model(EfficientNetV2B0, config, y_train.shape[1], 'EfficientNetV2B0')
test_loss, test_accuracy = eff_model.evaluate(X_test, y_test)
print("Test results \n Loss:",test_loss,'\n Accuracy',test_accuracy)
test_acc = np.expand_dims(X_train[0], axis=0)
%timeit eff_model.predict(test_acc, verbose = 0)
alex_model=keras.models.Sequential([
    keras.layers.Conv2D(filters=128, kernel_size=(11,11), strides=(4,4), activation='relu', input_shape=config.img_size),
    keras.layers.BatchNormalization(),
    keras.layers.MaxPool2D(pool_size=(2,2)),
    keras.layers.Conv2D(filters=256, kernel_size=(5,5), strides=(1,1), activation='relu', padding="same"),
    keras.layers.BatchNormalization(),
    keras.layers.MaxPool2D(pool_size=(3,3)),
    keras.layers.Conv2D(filters=256, kernel_size=(3,3), strides=(1,1), activation='relu', padding="same"),
    keras.layers.BatchNormalization(),
    keras.layers.Conv2D(filters=256, kernel_size=(1,1), strides=(1,1), activation='relu', padding="same"),
    keras.layers.BatchNormalization(),
    keras.layers.Conv2D(filters=256, kernel_size=(1,1), strides=(1,1), activation='relu', padding="same"),
    keras.layers.BatchNormalization(),
    keras.layers.MaxPool2D(pool_size=(2,2)),
    keras.layers.Flatten(),
    keras.layers.Dense(256,activation='relu'),
    keras.layers.Dense(128,activation='relu'),
    keras.layers.Dense(y_test.shape[1])  
    
    
])

 # 训练模型
   
alex_model.compile(optimizer=keras.optimizers.Adam(5e-5), loss='mse', metrics=['accuracy'])

#   early = EarlyStopping(monitor="val_accuracy", mode="max", patience=2, verbose = 1)
#   checkpoint = ModelCheckpoint(f'./{folder_name}.ckpt', monitor='val_accuracy', save_best_only=True, mode='max')

alex_model.fit(
  X_train, 
  y_train, 
  batch_size=config.batch_size,
  epochs = 10, 
  validation_data=(X_val, y_val),
  verbose=1)#,
# 评估模型

test_loss, test_accuracy = alex_model.evaluate(X_test, y_test)
print("Test results \n Loss:",test_loss,'\n Accuracy',test_accuracy)
# 预测
test_acc = np.expand_dims(X_train[0], axis=0)
%timeit alex_model.predict(test_acc, verbose = 0)
fig = plt.figure(figsize=(3, 3))
image_with_keypoints(X_test, y_test, 0)
# 展示真实标签
plt.title('True Label') 
plt.show()
# 可视化预测结果

y_pred = resnet_model.predict(X_test, verbose = 0)
fig = plt.figure(figsize=(3, 3))

image_with_keypoints(X_test, y_pred, 0)
plt.title('Predict') 
plt.show()
